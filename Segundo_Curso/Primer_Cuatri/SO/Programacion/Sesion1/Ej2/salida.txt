
Bloque 1 :
Image Image::Zoom2X() const{

    Image resultado(2*get_rows()-1,2*get_cols()-1)
Bloque 2 :
;

    // A√±adimos en su nueva posici√≥n a los p√≠xeles de la imagen original
 
Bloque 3 :
   for(int i=0; i < get_rows(); i++){
        for(int j=0; j < get_cols(); j++)

Bloque 4 :
            resultado.set_pixel(2 * i, 2 * j, get_pixel(i, j));
    }

    // Re
Bloque 5 :
llenamos las columnas impares
    for(int i=0; i < resultado.get_rows(); i+=2){

Bloque 6 :
        for(int j=1; j < resultado.get_cols(); j+=2)
            resultado.set_p
Bloque 7 :
ixel(i,j,round((resultado.get_pixel(i,j-1)+resultado.get_pixel(i,j+1))/2.0));
  
Bloque 8 :
  }

    // Rellenamos el resto
    for(int i=1; i < resultado.get_rows(); i+=2)
Bloque 9 :
{
        for(int j=0; j < resultado.get_cols(); j++) {

            if(j%2 == 0
Bloque 10 :
) {
                resultado.set_pixel(i, j, round((resultado.get_pixel(i-1, j)
Bloque 11 :
 +
                resultado.get_pixel(i+1, j)) / 2.0));
            }
         
Bloque 12 :
   else {
                resultado.set_pixel(i, j, round((resultado.get_pixel(i
Bloque 13 :
-1, j-1 )
                + resultado.get_pixel(i-1,j+1)+resultado.get_pixel(i+1
Bloque 14 :
,j-1)+
                resultado.get_pixel(i+1,j+1)) / 4.0));
            }
    
Bloque 15 :
    }
    }

    return resultado;
}
Image Image::Zoom2X() const{

    Image res
Bloque 16 :
ultado(2*get_rows()-1,2*get_cols()-1);

    // A√±adimos en su nueva posici√≥n a
Bloque 17 :
 los p√≠xeles de la imagen original
    for(int i=0; i < get_rows(); i++){
     
Bloque 18 :
   for(int j=0; j < get_cols(); j++)
            resultado.set_pixel(2 * i, 2 * 
Bloque 19 :
j, get_pixel(i, j));
    }

    // Rellenamos las columnas impares
    for(int i
Bloque 20 :
=0; i < resultado.get_rows(); i+=2){
        for(int j=1; j < resultado.get_cols
Bloque 21 :
(); j+=2)
            resultado.set_pixel(i,j,round((resultado.get_pixel(i,j-1)+
Bloque 22 :
resultado.get_pixel(i,j+1))/2.0));
    }

    // Rellenamos el resto
    for(int
Bloque 23 :
 i=1; i < resultado.get_rows(); i+=2){
        for(int j=0; j < resultado.get_co
Bloque 24 :
ls(); j++) {

            if(j%2 == 0) {
                resultado.set_pixel(i, 
Bloque 25 :
j, round((resultado.get_pixel(i-1, j) +
                resultado.get_pixel(i+1,
Bloque 26 :
 j)) / 2.0));
            }
            else {
                resultado.set_pix
Bloque 27 :
el(i, j, round((resultado.get_pixel(i-1, j-1 )
                + resultado.get_p
Bloque 28 :
ixel(i-1,j+1)+resultado.get_pixel(i+1,j-1)+
                resultado.get_pixel(
Bloque 29 :
i+1,j+1)) / 4.0));
            }
        }
    }

    return resultado;
}
Image 
Bloque 30 :
Image::Zoom2X() const{

    Image resultado(2*get_rows()-1,2*get_cols()-1);

   
Bloque 31 :
 // A√±adimos en su nueva posici√≥n a los p√≠xeles de la imagen original
    for
Bloque 32 :
(int i=0; i < get_rows(); i++){
        for(int j=0; j < get_cols(); j++)
      
Bloque 33 :
      resultado.set_pixel(2 * i, 2 * j, get_pixel(i, j));
    }

    // Rellenam
Bloque 34 :
os las columnas impares
    for(int i=0; i < resultado.get_rows(); i+=2){
      
Bloque 35 :
  for(int j=1; j < resultado.get_cols(); j+=2)
            resultado.set_pixel(i
Bloque 36 :
,j,round((resultado.get_pixel(i,j-1)+resultado.get_pixel(i,j+1))/2.0));
    }

 
Bloque 37 :
   // Rellenamos el resto
    for(int i=1; i < resultado.get_rows(); i+=2){
    
Bloque 38 :
    for(int j=0; j < resultado.get_cols(); j++) {

            if(j%2 == 0) {
  
Bloque 39 :
              resultado.set_pixel(i, j, round((resultado.get_pixel(i-1, j) +
   
Bloque 40 :
             resultado.get_pixel(i+1, j)) / 2.0));
            }
            els
Bloque 41 :
e {
                resultado.set_pixel(i, j, round((resultado.get_pixel(i-1, j-
Bloque 42 :
1 )
                + resultado.get_pixel(i-1,j+1)+resultado.get_pixel(i+1,j-1)+
Bloque 43 :

                resultado.get_pixel(i+1,j+1)) / 4.0));
            }
        }

Bloque 44 :
    }

    return resultado;
}
Image Image::Zoom2X() const{

    Image resultado
Bloque 45 :
(2*get_rows()-1,2*get_cols()-1);

    // A√±adimos en su nueva posici√≥n a los p
Bloque 46 :
√≠xeles de la imagen original
    for(int i=0; i < get_rows(); i++){
        for
Bloque 47 :
(int j=0; j < get_cols(); j++)
            resultado.set_pixel(2 * i, 2 * j, get
Bloque 48 :
_pixel(i, j));
    }

    // Rellenamos las columnas impares
    for(int i=0; i 
Bloque 49 :
< resultado.get_rows(); i+=2){
        for(int j=1; j < resultado.get_cols(); j+
Bloque 50 :
=2)
            resultado.set_pixel(i,j,round((resultado.get_pixel(i,j-1)+result
Bloque 51 :
ado.get_pixel(i,j+1))/2.0));
    }

    // Rellenamos el resto
    for(int i=1; 
Bloque 52 :
i < resultado.get_rows(); i+=2){
        for(int j=0; j < resultado.get_cols(); 
Bloque 53 :
j++) {

            if(j%2 == 0) {
                resultado.set_pixel(i, j, rou
Bloque 54 :
nd((resultado.get_pixel(i-1, j) +
                resultado.get_pixel(i+1, j)) /
Bloque 55 :
 2.0));
            }
            else {
                resultado.set_pixel(i, 
Bloque 56 :
j, round((resultado.get_pixel(i-1, j-1 )
                + resultado.get_pixel(i
Bloque 57 :
-1,j+1)+resultado.get_pixel(i+1,j-1)+
                resultado.get_pixel(i+1,j+
Bloque 58 :
1)) / 4.0));
            }
        }
    }

    return resultado;
}
Image Image:
Bloque 59 :
:Zoom2X() const{

    Image resultado(2*get_rows()-1,2*get_cols()-1);

    // A√
Bloque 60 :
±adimos en su nueva posici√≥n a los p√≠xeles de la imagen original
    for(int i
Bloque 61 :
=0; i < get_rows(); i++){
        for(int j=0; j < get_cols(); j++)
            
Bloque 62 :
resultado.set_pixel(2 * i, 2 * j, get_pixel(i, j));
    }

    // Rellenamos las
Bloque 63 :
 columnas impares
    for(int i=0; i < resultado.get_rows(); i+=2){
        for(
Bloque 64 :
int j=1; j < resultado.get_cols(); j+=2)
            resultado.set_pixel(i,j,rou
Bloque 65 :
nd((resultado.get_pixel(i,j-1)+resultado.get_pixel(i,j+1))/2.0));
    }

    // 
Bloque 66 :
Rellenamos el resto
    for(int i=1; i < resultado.get_rows(); i+=2){
        fo
Bloque 67 :
r(int j=0; j < resultado.get_cols(); j++) {

            if(j%2 == 0) {
        
Bloque 68 :
        resultado.set_pixel(i, j, round((resultado.get_pixel(i-1, j) +
         
Bloque 69 :
       resultado.get_pixel(i+1, j)) / 2.0));
            }
            else {
  
Bloque 70 :
              resultado.set_pixel(i, j, round((resultado.get_pixel(i-1, j-1 )
  
Bloque 71 :
              + resultado.get_pixel(i-1,j+1)+resultado.get_pixel(i+1,j-1)+
     
Bloque 72 :
           resultado.get_pixel(i+1,j+1)) / 4.0));
            }
        }
    }

Bloque 73 :

    return resultado;
}
Image Image::Zoom2X() const{

    Image resultado(2*get
Bloque 74 :
_rows()-1,2*get_cols()-1);

    // A√±adimos en su nueva posici√≥n a los p√≠xele
Bloque 75 :
s de la imagen original
    for(int i=0; i < get_rows(); i++){
        for(int j
Bloque 76 :
=0; j < get_cols(); j++)
            resultado.set_pixel(2 * i, 2 * j, get_pixel
Bloque 77 :
(i, j));
    }

    // Rellenamos las columnas impares
    for(int i=0; i < resu
Bloque 78 :
ltado.get_rows(); i+=2){
        for(int j=1; j < resultado.get_cols(); j+=2)
  
Bloque 79 :
          resultado.set_pixel(i,j,round((resultado.get_pixel(i,j-1)+resultado.ge
Bloque 80 :
t_pixel(i,j+1))/2.0));
    }

    // Rellenamos el resto
    for(int i=1; i < re
Bloque 81 :
sultado.get_rows(); i+=2){
        for(int j=0; j < resultado.get_cols(); j++) {
Bloque 82 :


            if(j%2 == 0) {
                resultado.set_pixel(i, j, round((re
Bloque 83 :
sultado.get_pixel(i-1, j) +
                resultado.get_pixel(i+1, j)) / 2.0))
Bloque 84 :
;
            }
            else {
                resultado.set_pixel(i, j, rou
Bloque 85 :
nd((resultado.get_pixel(i-1, j-1 )
                + resultado.get_pixel(i-1,j+1
Bloque 86 :
)+resultado.get_pixel(i+1,j-1)+
                resultado.get_pixel(i+1,j+1)) / 
Bloque 87 :
4.0));
            }
        }
    }

    return resultado;
}
